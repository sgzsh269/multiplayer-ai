---
description: 
globs: 
alwaysApply: true
---

# Project structure
Project is a monorepo with the following key directories:

* `/packages/webapp/` - Frontend and Backend
* `/packages/party/` - PartyKit multiplayer server
* `/docker/` - Docker compose files for postgres db and other services
* `/ai-ref/` - Project reference files for AI coding assistants
* `/.cursor/` - Cursor rules

# Frameworks/Libs   
- Always use `Typescript` as the programming language
- Use `bun` as the package manager for workspace creation, package installation, monorepo, commands etc., refer to docs [bun-docs.md](mdc:ai-ref/external-docs/bun-docs.md)
- Use `Drizzle` lib for ORM and DB migration with postgres DB [drizzle-docs.md](mdc:ai-ref/external-docs/drizzle-docs.md)
- Use `Clerk` for auth, refer to docs [clerk-docs.md](mdc:ai-ref/external-docs/clerk-docs.md)
- Use `NextJS` for backend and frontend, refer to docs [nextjs-docs.md](mdc:ai-ref/external-docs/nextjs-docs.md)
- Use `zustand` for state management on the frontend, refer to docs [zustand-docs.md](mdc:ai-ref/external-docs/zustand-docs.md)
- Use `Zod` for schema validation, refer to docs [zod-docs.md](mdc:ai-ref/external-docs/zod-docs.md)
- Use `AI SDK` for creating chat assistants and integrating with language models, refer to docs [ai-sdk-docs.md](mdc:ai-ref/external-docs/ai-sdk-docs.md)
- Use `Shadcn` for UI frameowrk and components, refer to docs [shadcn-docs.md](mdc:ai-ref/external-docs/shadcn-docs.md)
- Use `PartyKit` for real-time collaborative workflows and message, refer to docs [partykit-docs.md](mdc:ai-ref/external-docs/partykit-docs.md)

# Instructions
- Use [project-spec.md](mdc:ai-ref/project-docs/project-spec.md) as project requirements doc
- Use [project-plan.md](mdc:ai-ref/project-docs/project-plan.md) as live planning doc to create, update and track implementation of various functionalities 
- Feel free to ask follow up clarifying questions for better understanding if something in the user request, plan, spec is unclear, vague or ambigious 
- Use `Playwright` MCP for using browser to validate changes that affect UI and integration with backend
- Use `Postgres` MCP server to check schemas and validate migration
- Do not re-run the dev server as hot-reloading is active
- If you continously run into issues for a bug you are trying to fix, just search the web for a possible solution